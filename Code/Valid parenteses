class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        // Iterate over each character in the string
        for (char c : s.toCharArray()) {
            // If it's an opening bracket, push it to the stack
            if (c == '(' || c == '[' || c == '{') {
                stack.push(c);
            } else {
                // If stack is empty or top of stack doesn't match with current closing bracket, return false
                if (stack.isEmpty()) {
                    return false;
                }
                char top = stack.pop();

                // Check if current closing bracket matches the top of stack
                if ((c == ')' && top != '(') ||
                    (c == ']' && top != '[') ||
                    (c == '}' && top != '{')) {
                    return false;
                }
            }
        }

        // If stack is empty, all brackets matched correctly
        return stack.isEmpty();
    }
}
